# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from test_picture import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import QImage, QPixmap, QPalette, QColor
from PyQt5.QtCore import Qt
import tkinter as tk
from tkinter import filedialog
from PyQt5.QtGui import qRgb
from PyQt5.QtGui import QFont
import numpy as np
import matplotlib.pyplot as plt1
import PIL
from matplotlib import ticker
from PIL import ImageQt

class Ui_MainWindow():
    global inputFilePath, result, outputFilePath, histogram, histoFilePath
    sample = 'sample'
    substrates = 'substrates'
    objective = 0
    load = False

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(810, 734)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.OpenPicture = QtWidgets.QPushButton(self.centralwidget)
        self.OpenPicture.setGeometry(QtCore.QRect(445, 32, 161, 61))
        self.OpenPicture.setObjectName("OpenPicture")
        self.OpenPicture.clicked.connect(self.loadPicture)
        self.OpenPicture.setFont(QFont("Calibri", 13))

        self.Input = QtWidgets.QLabel(self.centralwidget)
        self.Input.setGeometry(QtCore.QRect(40, 50, 360, 271))
        self.Input.setText("")
        self.Input.setObjectName("Input")
        input = QPalette()
        input.setColor(QPalette.Background, Qt.white)
        self.Input.setAutoFillBackground(True)
        self.Input.setPalette(input)

        self.Output = QtWidgets.QLabel(self.centralwidget)
        self.Output.setGeometry(QtCore.QRect(40, 390, 360, 271))
        self.Output.setText("")
        self.Output.setObjectName("Output")
        output = QPalette()
        output.setColor(QPalette.Background, Qt.white)
        self.Output.setAutoFillBackground(True)
        self.Output.setPalette(output)

        self.PredictPicture = QtWidgets.QPushButton(self.centralwidget)
        self.PredictPicture.setGeometry(QtCore.QRect(620, 32, 161, 61))
        self.PredictPicture.setObjectName("PredictPicture")
        self.PredictPicture.clicked.connect(self.predictPicture)
        self.PredictPicture.setFont(QFont("Calibri", 13))
        self.PredictPicture.setEnabled(False)

        self.SavePicture = QtWidgets.QPushButton(self.centralwidget)
        self.SavePicture.setGeometry(QtCore.QRect(445, 102, 161, 61))
        self.SavePicture.setObjectName("SavePicture")
        self.SavePicture.setFont(QFont("Calibri", 13))
        self.SavePicture.clicked.connect(self.savePicture)
        self.SavePicture.setEnabled(False)

        self.SaveHistogram = QtWidgets.QPushButton(self.centralwidget)
        self.SaveHistogram.setGeometry(QtCore.QRect(620, 102, 161, 61))
        self.SaveHistogram.setObjectName("SaveHistogram")
        self.SaveHistogram.setFont(QFont("Calibri", 13))
        self.SaveHistogram.clicked.connect(self.saveHistogram)
        self.SaveHistogram.setEnabled(False)

        self.MicroscopeImage = QtWidgets.QLabel(self.centralwidget)
        self.MicroscopeImage.setGeometry(QtCore.QRect(40, 22, 141, 20))
        self.MicroscopeImage.setObjectName("MicroscopeImage")
        self.MicroscopeImage.setFont(QFont("Calibri", 12, QFont.Bold))

        self.Prediction = QtWidgets.QLabel(self.centralwidget)
        self.Prediction.setGeometry(QtCore.QRect(40, 370, 141, 20))
        self.Prediction.setObjectName("Prediction")
        self.Prediction.setFont(QFont("Calibri", 12, QFont.Bold))

        self.Histogram = QtWidgets.QLabel(self.centralwidget)
        self.Histogram.setGeometry(QtCore.QRect(445, 440, 336, 221))
        self.Histogram.setObjectName("Histogram")
        hist = QPalette()
        hist.setColor(QPalette.Background, Qt.white)
        self.Histogram.setAutoFillBackground(True)
        self.Histogram.setPalette(output)

        self.Pixels = QtWidgets.QLabel(self.centralwidget)
        self.Pixels.setGeometry(QtCore.QRect(580, 180, 76, 31))
        self.Pixels.setObjectName("Pixels")
        self.Pixels.setFont(QFont("Calibri", 10, QFont.Bold))
        self.Pixels.setAlignment(Qt.AlignHCenter)

        self.Percentage = QtWidgets.QLabel(self.centralwidget)
        self.Percentage.setGeometry(QtCore.QRect(675, 180, 76, 31))
        self.Percentage.setObjectName("Percentage")
        self.Percentage.setFont(QFont("Calibri", 10, QFont.Bold))
        self.Percentage.setAlignment(Qt.AlignHCenter)
        self.OneLayerPixel = QtWidgets.QTextBrowser(self.centralwidget)
        self.OneLayerPixel.setGeometry(QtCore.QRect(580, 210, 76, 31))
        self.OneLayerPixel.setObjectName("OneLayerPixel")
        self.OneLayerPixel.setFont(QFont("Calibri", 10, QFont.Bold))

        self.OneLayerColor = QtWidgets.QLabel(self.centralwidget)
        self.OneLayerColor.setGeometry(QtCore.QRect(460, 210, 31, 31))
        self.OneLayerColor.setObjectName("OneLayerColor")
        one = QPalette()
        one.setColor(QPalette.Background, QColor(61, 165, 217))
        self.OneLayerColor.setAutoFillBackground(True)
        self.OneLayerColor.setPalette(one)

        self.OneLayerPercent = QtWidgets.QTextBrowser(self.centralwidget)
        self.OneLayerPercent.setGeometry(QtCore.QRect(675, 210, 76, 31))
        self.OneLayerPercent.setObjectName("OneLayerPercent")
        self.OneLayerPercent.setFont(QFont("Calibri", 10, QFont.Bold))

        self.TwoLayerPixel = QtWidgets.QTextBrowser(self.centralwidget)
        self.TwoLayerPixel.setGeometry(QtCore.QRect(580, 250, 76, 31))
        self.TwoLayerPixel.setObjectName("TwoLayerPixel")
        self.TwoLayerPixel.setFont(QFont("Calibri", 10, QFont.Bold))

        self.TwoLayerColor = QtWidgets.QLabel(self.centralwidget)
        self.TwoLayerColor.setGeometry(QtCore.QRect(460, 250, 31, 31))
        self.TwoLayerColor.setObjectName("TwoLayerColor")
        two = QPalette()
        two.setColor(QPalette.Background, QColor(115, 191, 184))
        self.TwoLayerColor.setAutoFillBackground(True)
        self.TwoLayerColor.setPalette(two)

        self.TwoLayerPercent = QtWidgets.QTextBrowser(self.centralwidget)
        self.TwoLayerPercent.setGeometry(QtCore.QRect(675, 250, 76, 31))
        self.TwoLayerPercent.setObjectName("TwoLayerPercent")
        self.TwoLayerPercent.setFont(QFont("Calibri", 10, QFont.Bold))

        self.ThreeLayerPixel = QtWidgets.QTextBrowser(self.centralwidget)
        self.ThreeLayerPixel.setGeometry(QtCore.QRect(580, 290, 76, 31))
        self.ThreeLayerPixel.setObjectName("ThreeLayerPixel")
        self.ThreeLayerPixel.setFont(QFont("Calibri", 10, QFont.Bold))

        self.ThreeLayerColor = QtWidgets.QLabel(self.centralwidget)
        self.ThreeLayerColor.setGeometry(QtCore.QRect(460, 290, 31, 31))
        self.ThreeLayerColor.setObjectName("ThreeLayerColor")
        three = QPalette()
        three.setColor(QPalette.Background, QColor(35, 100, 170))
        self.ThreeLayerColor.setAutoFillBackground(True)
        self.ThreeLayerColor.setPalette(three)

        self.ThreeLayerPercent = QtWidgets.QTextBrowser(self.centralwidget)
        self.ThreeLayerPercent.setGeometry(QtCore.QRect(675, 290, 76, 31))
        self.ThreeLayerPercent.setObjectName("ThreeLayerPercent")
        self.ThreeLayerPercent.setFont(QFont("Calibri", 10, QFont.Bold))

        self.FourLayerPixel = QtWidgets.QTextBrowser(self.centralwidget)
        self.FourLayerPixel.setGeometry(QtCore.QRect(580, 330, 76, 31))
        self.FourLayerPixel.setObjectName("FourLayerPixel")
        self.FourLayerPixel.setFont(QFont("Calibri", 10, QFont.Bold))

        self.FourLayerColor = QtWidgets.QLabel(self.centralwidget)
        self.FourLayerColor.setGeometry(QtCore.QRect(460, 330, 31, 31))
        self.FourLayerColor.setObjectName("FourLayerColor")
        four = QPalette()
        four.setColor(QPalette.Background, QColor(254, 198, 1))
        self.FourLayerColor.setAutoFillBackground(True)
        self.FourLayerColor.setPalette(four)

        self.FourLayerPercent = QtWidgets.QTextBrowser(self.centralwidget)
        self.FourLayerPercent.setGeometry(QtCore.QRect(675, 330, 76, 31))
        self.FourLayerPercent.setObjectName("FourLayerPercent")
        self.FourLayerPercent.setFont(QFont("Calibri", 10, QFont.Bold))

        self.BulkPixel = QtWidgets.QTextBrowser(self.centralwidget)
        self.BulkPixel.setGeometry(QtCore.QRect(580, 370, 76, 31))
        self.BulkPixel.setObjectName("FiveLayerPixel")
        self.BulkPixel.setFont(QFont("Calibri", 10, QFont.Bold))

        self.BulkColor = QtWidgets.QLabel(self.centralwidget)
        self.BulkColor.setGeometry(QtCore.QRect(460, 370, 31, 31))
        self.BulkColor.setObjectName("BulkColor")
        bulk = QPalette()
        bulk.setColor(QPalette.Background, QColor(234, 115, 23))
        self.BulkColor.setAutoFillBackground(True)
        self.BulkColor.setPalette(bulk)

        self.BulkPercent = QtWidgets.QTextBrowser(self.centralwidget)
        self.BulkPercent.setGeometry(QtCore.QRect(675, 370, 76, 31))
        self.BulkPercent.setObjectName("BulkPercent")
        self.BulkPercent.setFont(QFont("Calibri", 10, QFont.Bold))
        self.histo = QtWidgets.QLabel(self.centralwidget)
        self.histo.setGeometry(QtCore.QRect(460, 415, 291, 31))
        self.histo.setObjectName("histo")
        self.histo.setFont(QFont("Calibri", 10, QFont.Bold))
        self.histo.setAlignment(Qt.AlignHCenter)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(505, 210, 71, 31))
        self.label_3.setObjectName("label_3")
        self.label_3.setFont(QFont("Calibri", 10, QFont.Bold))
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(505, 250, 71, 31))
        self.label_5.setObjectName("label_5")
        self.label_5.setFont(QFont("Calibri", 10, QFont.Bold))
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(505, 290, 71, 31))
        self.label_7.setObjectName("label_7")
        self.label_7.setFont(QFont("Calibri", 10, QFont.Bold))
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(505, 330, 71, 31))
        self.label_9.setObjectName("label_9")
        self.label_9.setFont(QFont("Calibri", 10, QFont.Bold))
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(505, 370, 71, 31))
        self.label_11.setObjectName("label_11")
        self.label_11.setFont(QFont("Calibri", 10, QFont.Bold))

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")

        self.menuSamples = QtWidgets.QMenu(self.menubar)
        self.menuSamples.setObjectName("menuSamples")

        self.menuSubstrates = QtWidgets.QMenu(self.menubar)
        self.menuSubstrates.setObjectName("menuSubstrates")

        self.menuObjective = QtWidgets.QMenu(self.menubar)
        self.menuObjective.setObjectName("menuObjective")

        self.menuSiO2_Si = QtWidgets.QMenu(self.menuSubstrates)
        self.menuSiO2_Si.setObjectName("menuSiO2_Si")

        MainWindow.setMenuBar(self.menubar)

        self.actionMoS2 = QtWidgets.QAction(MainWindow)
        self.actionMoS2.setObjectName("actionMoS2")
        self.actionMoS2.triggered.connect(self.selectSampleMoS2)

        self.actionWS2 = QtWidgets.QAction(MainWindow)
        self.actionWS2.setObjectName("actionWS2")
        self.actionWS2.triggered.connect(self.selectSampleWS2)

        self.actionWSe2 = QtWidgets.QAction(MainWindow)
        self.actionWSe2.setObjectName("actionWSe2")
        self.actionWSe2.triggered.connect(self.selectSampleWSe2)

        self.actionSapphire = QtWidgets.QAction(MainWindow)
        self.actionSapphire.setObjectName("actionSapphire")
        self.actionSapphire.triggered.connect(self.selectSubstrateSapphire)

        self.actionThickness = QtWidgets.QAction(MainWindow)
        self.actionThickness.setObjectName("actionThickness")

        self.action70nm = QtWidgets.QAction(MainWindow)
        self.action70nm.setObjectName("action70nm")
        self.action70nm.triggered.connect(self.selectSubstrate70nm)

        self.action270nm = QtWidgets.QAction(MainWindow)
        self.action270nm.setObjectName("action270nm")
        self.action270nm.triggered.connect(self.selectSubstrate270nm)

        self.action10_X = QtWidgets.QAction(MainWindow)
        self.action10_X.setObjectName("action10_X")
        self.action10_X.triggered.connect(self.selectObjective10)

        self.action20 = QtWidgets.QAction(MainWindow)
        self.action20.setObjectName("action20")
        self.action20.triggered.connect(self.selectObjective20)

        self.action50 = QtWidgets.QAction(MainWindow)
        self.action50.setObjectName("action50")
        self.action50.triggered.connect(self.selectObjective50)

        self.action100 = QtWidgets.QAction(MainWindow)
        self.action100.setObjectName("action100")
        self.action100.triggered.connect(self.selectObjective100)

        self.menuSamples.addAction(self.actionMoS2)
        self.menuSamples.addAction(self.actionWS2)
        self.menuSamples.addAction(self.actionWSe2)
        self.menuSiO2_Si.addSeparator()
        self.menuSiO2_Si.addAction(self.actionThickness)
        self.menuSiO2_Si.addSeparator()
        self.menuSiO2_Si.addAction(self.action70nm)
        self.menuSiO2_Si.addAction(self.action270nm)
        self.menuSubstrates.addAction(self.menuSiO2_Si.menuAction())
        self.menuSubstrates.addAction(self.actionSapphire)
        self.menuObjective.addAction(self.action10_X)
        self.menuObjective.addAction(self.action20)
        self.menuObjective.addAction(self.action50)
        self.menuObjective.addAction(self.action100)
        self.menubar.addAction(self.menuSamples.menuAction())
        self.menubar.addAction(self.menuSubstrates.menuAction())
        self.menubar.addAction(self.menuObjective.menuAction())

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Predict"))
        self.OpenPicture.setText(_translate("MainWindow", "Load Image"))
        self.PredictPicture.setText(_translate("MainWindow", "Predicted Distribution"))
        self.SavePicture.setText(_translate("MainWindow", "Save Prediction"))
        self.SaveHistogram.setText(_translate("MainWindow", "Save Histogram"))
        self.MicroscopeImage.setText(_translate("MainWindow", "Microscope Image"))
        self.Prediction.setText(_translate("MainWindow", "Prediction"))
        self.Pixels.setText(_translate("MainWindow", "Pixels"))
        self.Percentage.setText(_translate("MainWindow", "Percentage"))
        self.label_3.setText(_translate("MainWindow", "1. Layer:"))
        self.OneLayerColor.setText(_translate("MainWindow", ""))
        self.label_5.setText(_translate("MainWindow", "2. Layer:"))
        self.TwoLayerColor.setText(_translate("MainWindow", ""))
        self.label_7.setText(_translate("MainWindow", "3. Layer:"))
        self.ThreeLayerColor.setText(_translate("MainWindow", ""))
        self.label_9.setText(_translate("MainWindow", "Multilayer:"))
        self.FourLayerColor.setText(_translate("MainWindow", ""))
        self.label_11.setText(_translate("MainWindow", "Bulk:"))
        self.BulkColor.setText(_translate("MainWindow", ""))
        self.histo.setText(_translate("MainWindow", "Histogram"))
        self.menuSamples.setTitle(_translate("MainWindow", "Samples"))
        self.menuSubstrates.setTitle(_translate("MainWindow", "Substrates"))
        self.menuSiO2_Si.setTitle(_translate("MainWindow", "SiO2/Si"))
        self.menuObjective.setTitle(_translate("MainWindow", "Objective"))
        self.actionMoS2.setText(_translate("MainWindow", "MoS2"))
        self.actionWS2.setText(_translate("MainWindow", "WS2"))
        self.actionWSe2.setText(_translate("MainWindow", "WSe2"))
        self.actionSapphire.setText(_translate("MainWindow", "Sapphire"))
        self.actionThickness.setText(_translate("MainWindow", "Thickness"))
        self.action70nm.setText(_translate("MainWindow", "70nm"))
        self.action270nm.setText(_translate("MainWindow", "270nm"))
        self.action10_X.setText(_translate("MainWindow", "10 ×"))
        self.action20.setText(_translate("MainWindow", "20 ×"))
        self.action50.setText(_translate("MainWindow", "50 ×"))
        self.action100.setText(_translate("MainWindow", "100 ×"))

    def loadPicture(self):
        OpenFile = tk.Tk()
        OpenFile.withdraw()
        self.inputFilePath = filedialog.askopenfilename()
        img_png = QPixmap(self.inputFilePath)
        png = img_png.scaled(self.Input.width(), self.Input.height(), Qt.KeepAspectRatio)
        self.Input.setPixmap(png)
        self.load = True
        if self.sample != 'sample' and self.substrates != 'substrates' and self.objective != 0:
            self.PredictPicture.setEnabled(True)

    def predictPicture(self):
        predict_picture, n_pred, sum = test_picture(256, 256, self.inputFilePath,
                                                    self.sample, self.substrates, self.objective)
        self.result = ImageQt.ImageQt(predict_picture)
        Result = QPixmap.fromImage(self.result)
        output = Result.scaled(self.Output.width(), self.Output.height(), Qt.KeepAspectRatio)
        self.Output.setPixmap(output)

        self.OneLayerPixel.setText(str(n_pred[1]))
        self.TwoLayerPixel.setText(str(n_pred[2]))
        self.ThreeLayerPixel.setText(str(n_pred[3]))
        self.FourLayerPixel.setText(str(n_pred[4]))
        self.BulkPixel.setText(str(n_pred[5]))

        self.OneLayerPercent.setText('{:.2%}'.format(n_pred[1] / sum))
        self.TwoLayerPercent.setText('{:.2%}'.format(n_pred[2] / sum))
        self.ThreeLayerPercent.setText('{:.2%}'.format(n_pred[3] / sum))
        self.FourLayerPercent.setText('{:.2%}'.format(n_pred[4] / sum))
        self.BulkPercent.setText('{:.2%}'.format(n_pred[5] / sum))

        x = ['1. Layer', '2.Layer', '3.Layer', 'Multilayer', 'Bulk']
        y = [n_pred[1] / sum, n_pred[2] / sum, n_pred[3] / sum, n_pred[4] / sum, n_pred[5] / sum]
        z = [n_pred[1] / sum * 1.003, n_pred[2] / sum * 1.003, n_pred[3] / sum * 1.003, n_pred[4] / sum * 1.003
            , n_pred[5] / sum * 1.003]
        m = [round(y[0]*100, 2),round(y[1]*100, 2),round(y[2]*100, 2),round(y[3]*100, 2),round(y[4]*100, 2)]
        fig, ax = plt1.subplots()
        b = ax.bar(x, y, label = 'Percentage')
        ax.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=1))
        plt1.title('Layer distribution')
        for n in range(len(m)):
            ax.text(x[n], z[n], str(m[n]) + '%', ha='center', va='bottom')

        plt1.ylabel('Percentage')
        plt1.legend()

        buffer_ = io.BytesIO()
        plt1.savefig(buffer_, format="png")
        buffer_.seek(0)
        image = PIL.Image.open(buffer_)
        nm_layers = 3
        ar = np.asarray(image)
        ar1 = np.zeros((397, 495, nm_layers))
        for layer in range(nm_layers):
            ar1[:, :, layer] = ar[59:456, 81:576, layer]
        self.histogram = QImage(ar1.shape[1], ar1.shape[0], QImage.Format_RGB32)
        for i in range(ar1.shape[1]):
            for j in range(ar1.shape[0]):
                value = qRgb(ar1[j, i, 0], ar1[j, i, 1], ar1[j, i, 2])
                self.histogram.setPixel(i, j, value)
        self.histogram = QPixmap.fromImage(self.histogram)
        self.Histogram.setScaledContents(True)
        self.Histogram.setPixmap(self.histogram)
        self.histogram = QImage(ar.shape[1], ar.shape[0], QImage.Format_RGB32)
        for i in range(ar.shape[1]):
            for j in range(ar.shape[0]):
                value = qRgb(ar[j, i, 0], ar[j, i, 1], ar[j, i, 2])
                self.histogram.setPixel(i, j, value)
        self.histogram = QPixmap.fromImage(self.histogram)
        buffer_.close()
        self.SaveHistogram.setEnabled(True)
        self.SavePicture.setEnabled(True)

    def savePicture(self):
        OpenFile = tk.Tk()
        OpenFile.withdraw()
        self.outputFilePath = filedialog.asksaveasfilename(title = u'save', filetypes = [("PNG", ".png")])
        self.result.save(str(self.outputFilePath) + '.png', 'PNG')

    def saveHistogram(self):
        OpenFile = tk.Tk()
        OpenFile.withdraw()
        self.histoFilePath = filedialog.asksaveasfilename(title=u'save', filetypes=[("PNG", ".png")])
        self.histogram.save(str(self.histoFilePath) + '.png', 'PNG')

    def selectSampleMoS2(self):
        self.sample = 'MoS2'
        self.menuSamples.setTitle('Sample: MoS2')
        if self.load and self.substrates != 'substrates' and self.objective != 0:
            self.PredictPicture.setEnabled(True)

    def selectSampleWS2(self):
        self.sample = 'WS2'
        self.menuSamples.setTitle('Sample: WS2')
        if self.load and self.substrates != 'substrates' and self.objective != 0:
            self.PredictPicture.setEnabled(True)

    def selectSampleWSe2(self):
        self.sample = 'WSe2'
        self.menuSamples.setTitle('Sample: WSe2')
        if self.load and self.substrates != 'substrates' and self.objective != 0:
            self.PredictPicture.setEnabled(True)

    def selectSubstrate70nm(self):
        self.substrates = '70nm'
        self.menuSubstrates.setTitle('Substrate: SiO2/Si 70nm')
        if self.load and self.sample != 'sample' and self.objective != 0:
            self.PredictPicture.setEnabled(True)

    def selectSubstrate270nm(self):
        self.substrates = '270nm'
        self.menuSubstrates.setTitle('Substrate: SiO2/Si 270nm')
        if self.load and self.sample != 'sample' and self.objective != 0:
            self.PredictPicture.setEnabled(True)

    def selectSubstrateSapphire(self):
        self.substrates = 'Sapphire'
        self.menuSubstrates.setTitle('Substrate: Sapphire')
        if self.load and self.sample != 'sample' and self.objective != 0:
            self.PredictPicture.setEnabled(True)

    def selectObjective10(self):
        self.objective = 10
        self.menuObjective.setTitle('Objective: 10 ×')
        if self.load and self.sample != 'sample' and self.substrates != 'substrates':
            self.PredictPicture.setEnabled(True)

    def selectObjective20(self):
        self.objective = 20
        self.menuObjective.setTitle('Objective: 20 ×')
        if self.load and self.sample != 'sample' and self.substrates != 'substrates':
            self.PredictPicture.setEnabled(True)

    def selectObjective50(self):
        self.objective = 50
        self.menuObjective.setTitle('Objective: 50 ×')
        if self.load and self.sample != 'sample' and self.substrates != 'substrates':
            self.PredictPicture.setEnabled(True)

    def selectObjective100(self):
        self.objective = 100
        self.menuObjective.setTitle('Objective: 100 ×')
        if self.load and self.sample != 'sample' and self.substrates != 'substrates':
            self.PredictPicture.setEnabled(True)